buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.3'
    // https://github.com/kt3k/coveralls-gradle-plugin
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.2.0'
  }
}

group = 'com.verisign.storm.metrics'
version = '0.1.4_SNAPSHOT'
description = "An IMetricsConsumer that forwards Storm's built-in metrics to a Graphite server for real-time graphing."

apply plugin: 'java'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'os-package'

ext {
  jdkVersion = '1.7'
  rpmVersion = System.getenv("VERSION") ?: "${project.version}"
  buildNumber = System.getenv("BUILD_NUMBER") ?: "1.verisign"
  rpmMaintainer = System.getenv("MAINTAINER") ?: "change.this@email.com"
  metricsVersion = '3.1.0'
}

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

repositories {
  mavenCentral()
  maven { url 'https://clojars.org/repo' }
}

dependencies {

  compile(
    ['org.apache.storm:storm-core:0.9.3'],
    ['com.google.guava:guava:17.0'],
    ["io.dropwizard.metrics:metrics-core:${metricsVersion}"],
    ["io.dropwizard.metrics:metrics-graphite:${metricsVersion}"],
  )

  testCompile(
    ['org.uncommons:reportng:1.1.4'],
    ['org.mockito:mockito-all:1.9.5'],
    ['org.easytesting:fest-assert-core:2.0M10'],
    ['org.testng:testng:6.8.8'],
    // Manually require Google Guice.  This is a required workaround for a known issue with TestNG 6.x.
    // (Gradle will fail to run tests otherwise.)
    ['com.google.inject:guice:3.0']
  )

}

task sourcesJar(type: Jar, dependsOn: 'classes') {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

test {
  useTestNG() {
    suiteXmlBuilder().suite(name: 'storm-graphite', parallel: 'tests', 'thread-count': '1') {
      test (name : 'all-tests') {
        packages {
          'package' (name: 'com.verisign.*')
        }
      }
    }
  }
  options {
    listeners << 'org.uncommons.reportng.HTMLReporter'
    listeners << 'org.uncommons.reportng.JUnitXMLReporter'
  }
  ext.useDefaultListeners = true
  ext.workingDirectory = 'build/'
}

// https://github.com/stevesaliman/gradle-cobertura-plugin
// http://ingorichter.blogspot.ch/2013/03/using-cobertura-with-gradle.html for list of options
cobertura {
  coverageFormats = ['xml', 'html'] // coveralls plugin depends on xml format report
}

task createWrapper(type: Wrapper) {
  gradleVersion = '2.3'
}

ospackage {
  packageName         project.name
  version             rpmVersion
  release             buildNumber
  packageDescription  description
  packager            rpmMaintainer
  url                 "https://github.com/verisign/storm-graphite"
  type                BINARY
  arch                NOARCH
  os                  LINUX
  user                'root'
}

buildRpm {
  into '/opt/storm'

  from(jar.outputs.files) {
    into 'lib'
  }
}
buildRpm.dependsOn(jar)

task buildUberJarRpm(type: Rpm) {
  packageName = "${project.name}_uber"
  into '/opt/storm'

  from(shadowJar.outputs.files) {
    into 'lib'
  }
}
buildUberJarRpm.dependsOn(shadowJar)

shadowJar {
  dependencies {
    include(dependency("io.dropwizard.metrics:metrics-core:${metricsVersion}"))
    include(dependency("io.dropwizard.metrics:metrics-graphite:${metricsVersion}"))
  }
}
